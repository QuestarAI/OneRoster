// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Questar.OneRoster.Data;

namespace Questar.OneRoster.Data.Migrations
{
    [DbContext(typeof(OneRosterDbContext))]
    [Migration("20180911160044_Create")]
    partial class Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.AcademicSession", b =>
                {
                    b.Property<Guid>("AcademicSessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("SchoolYear");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Type");

                    b.HasKey("AcademicSessionId");

                    b.HasIndex("MetadataCollectionId");

                    b.HasIndex("ParentId");

                    b.ToTable("AcademicSession");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<int>("Status");

                    b.HasKey("CategoryId");

                    b.HasIndex("MetadataCollectionId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AcademicSessionId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("CourseId");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<Guid>("SchoolId");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Type");

                    b.HasKey("ClassId");

                    b.HasIndex("AcademicSessionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("MetadataCollectionId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.ClassResource", b =>
                {
                    b.Property<Guid>("ClassId");

                    b.Property<Guid>("ResourceId");

                    b.HasKey("ClassId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ClassResource");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<Guid>("OrganizationId");

                    b.Property<Guid>("SchoolYearId");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("CourseId");

                    b.HasIndex("MetadataCollectionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.CourseResource", b =>
                {
                    b.Property<Guid>("CourseId");

                    b.Property<Guid>("ResourceId");

                    b.HasKey("CourseId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("CourseResource");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Demographics", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<int>("Status");

                    b.Property<Guid?>("UserId1");

                    b.HasKey("UserId");

                    b.HasIndex("MetadataCollectionId");

                    b.HasIndex("UserId1");

                    b.ToTable("Demographics");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("BeginDate");

                    b.Property<Guid?>("ClassId");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<int>("Status");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("MetadataCollectionId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.LineItem", b =>
                {
                    b.Property<Guid>("LineItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("ClassId");

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<int>("Status");

                    b.HasKey("LineItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("MetadataCollectionId");

                    b.ToTable("LineItem");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Metadata", b =>
                {
                    b.Property<Guid>("CollectionId");

                    b.Property<string>("Key")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .HasMaxLength(256);

                    b.HasKey("CollectionId", "Key");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.MetadataCollection", b =>
                {
                    b.Property<Guid>("MetadataCollectionId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("MetadataCollectionId");

                    b.ToTable("MetadataCollection");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<Guid>("ParentId");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Type");

                    b.HasKey("OrganizationId");

                    b.HasIndex("MetadataCollectionId");

                    b.HasIndex("ParentId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Resource", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ResourceId");

                    b.HasIndex("MetadataCollectionId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.ResourcePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Position");

                    b.Property<Guid>("ResourceId");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourcePosition");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Result", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LineItemId");

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserId");

                    b.HasKey("ResultId");

                    b.HasIndex("LineItemId");

                    b.HasIndex("MetadataCollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("Enabled");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<Guid?>("MetadataCollectionId");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Position");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MetadataCollectionId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserAgent", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("AgentId");

                    b.HasKey("UserId", "AgentId");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("UserAgent");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserGrade", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GradeId");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.ToTable("UserGrade");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserOrganization", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganization");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.AcademicSession", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");

                    b.HasOne("Questar.OneRoster.Data.Entities.AcademicSession", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Category", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Class", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.AcademicSession", "AcademicSession")
                        .WithMany()
                        .HasForeignKey("AcademicSessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questar.OneRoster.Data.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId");

                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");

                    b.HasOne("Questar.OneRoster.Data.Entities.Organization", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.ClassResource", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Class", "Class")
                        .WithMany("Resources")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questar.OneRoster.Data.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Course", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");

                    b.HasOne("Questar.OneRoster.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Questar.OneRoster.Data.Entities.AcademicSession", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.CourseResource", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Course", "Course")
                        .WithMany("Resources")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questar.OneRoster.Data.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Demographics", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");

                    b.HasOne("Questar.OneRoster.Data.Entities.User")
                        .WithOne("Demographics")
                        .HasForeignKey("Questar.OneRoster.Data.Entities.Demographics", "UserId");

                    b.HasOne("Questar.OneRoster.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Enrollment", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Class")
                        .WithMany("Users")
                        .HasForeignKey("ClassId");

                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.LineItem", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Category", "Category")
                        .WithMany("LineItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questar.OneRoster.Data.Entities.Class", "Class")
                        .WithMany("LineItems")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Metadata", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "Collection")
                        .WithMany("Metadata")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Organization", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");

                    b.HasOne("Questar.OneRoster.Data.Entities.Organization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Resource", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.ResourcePosition", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Resource", "Resource")
                        .WithMany("Positions")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.Result", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.LineItem", "LineItem")
                        .WithMany("Results")
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");

                    b.HasOne("Questar.OneRoster.Data.Entities.User", "User")
                        .WithMany("Results")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.RoleClaim", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.User", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.MetadataCollection", "MetadataCollection")
                        .WithMany()
                        .HasForeignKey("MetadataCollectionId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserAgent", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.User", "Agent")
                        .WithOne()
                        .HasForeignKey("Questar.OneRoster.Data.Entities.UserAgent", "AgentId");

                    b.HasOne("Questar.OneRoster.Data.Entities.User", "User")
                        .WithMany("Agents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserClaim", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserGrade", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Grade", "Grade")
                        .WithMany("Users")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questar.OneRoster.Data.Entities.User", "User")
                        .WithMany("Grades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserLogin", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserOrganization", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Questar.OneRoster.Data.Entities.User", "User")
                        .WithMany("Organizations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Questar.OneRoster.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Questar.OneRoster.Data.Entities.UserToken", b =>
                {
                    b.HasOne("Questar.OneRoster.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
